#ifndef FMMTL_DIPOLE_KERN
#define FMMTL_DIPOLE_KERN
#ifndef FMMTL_KERNEL
#define FMMTL_KERNEL
#endif
#define _USE_MATH_DEFINES
#include "math.h"
#include "fmmtl/Kernel.hpp"
#include "fmmtl/numeric/Vec.hpp"

struct DipoleKernel
  : public fmmtl::Kernel<DipoleKernel> {
  //size of the magnetic dipole particle

  double m_h;
  DipoleKernel(double _h) : m_h(_h) {}

  typedef Vec<3, double>  source_type;
  typedef Vec<3, double>  charge_type;
  typedef Vec<3, double>  target_type;
  typedef Vec<3, double>  result_type;
  //kernel_value_type:
  //rx, ry, rz, w_avr, w_dens
  //rx,ry,rz are normalized vector from source to target
  //w_avr is the average density from source to target as sphere
  //w_dens is the density at target

  struct kernel_value_type {
    double rx;
    double ry;
    double rz;
    double w_avr;
    double w_dens;

    FMMTL_INLINE
      kernel_value_type(double _rx, double _ry, double _rz, double _w_avr, double _w_dens) {
      rx = _rx;
      ry = _ry;
      rz = _rz;
      w_avr = _w_avr;
      w_dens = _w_dens;
    }

    FMMTL_INLINE
      result_type operator*(const charge_type& c) const {
      double temp_v1 = (rx*c[0] + ry*c[1] + rz*c[2])*(w_avr - w_dens);
      double temp_v2 = w_avr *0.33333333333333333333333f;

      double out_hx = rx*temp_v1 - temp_v2*c[0];
      double out_hy = ry*temp_v1 - temp_v2*c[1];
      double out_hz = rz*temp_v1 - temp_v2*c[2];
      return result_type{ out_hx ,out_hy,out_hz };

    }
  };

  template<typename _Ty>
  FMMTL_INLINE void get_weight(_Ty & w_avr, _Ty & w_dens, _Ty r, _Ty h) const {
    _Ty q = r / h;
    _Ty q2 = q*q;
    _Ty q3 = q2*q;
    _Ty coe = 1 / M_PI / (h*h*h);

    if (q >= 2) {
      w_avr = 3.f / (4 * M_PI * r*r*r);
      w_dens = 0;
    }
    if (q >= 1 && q < 2) {
      w_avr = -(3.f * (q3*q3 / 6.f - (6.f * q3*q2) / 5.f + 3.f * q2*q2 - (8.f * q3) / 3.f + 1.f / 15)) / (4 * M_PI*r*r*r);
      _Ty tmq = 2 - q;
      w_dens = coe*0.25*tmq*tmq*tmq;
    }
    if (q < 1) {
      w_avr = (15.f * q3 - 36.f * q2 + 40.f) / (40 * M_PI*h*h*h);
      _Ty tmq = 2 - q;
      _Ty omq = 1 - q;
      w_dens = coe*(0.25*tmq*tmq*tmq - omq*omq*omq);
    }
  }

  /*Charge as distribution of dipole with function W,
    result as the magnetic field of the dipole.
  */

  FMMTL_INLINE
    kernel_value_type operator()(const target_type& t,
                                 const source_type& s) const {
    Vec<3, double> rvec{
      (double)t[0] - s[0],
      (double)t[1] - s[1],
      (double)t[2] - s[2] };            //   Vector from source to target
    double r = norm_2(rvec);
    double invr = 1 / r;

    //rvec becomes normalized.
    rvec *= invr;
    double wdens;
    double wavr;
    get_weight(wavr, wdens, r, m_h);
    return kernel_value_type(rvec[0], rvec[1], rvec[2], wavr, wdens);
  }

  FMMTL_INLINE
    kernel_value_type transpose(const kernel_value_type& kts) const {
    return kts;
  }
};
FMMTL_KERNEL_EXTRAS(DipoleKernel);

#endif
